version: '3'

silent: true

env:
  ANSIBLE_EXE: "./.venv/bin/ansible"
  ANSIBLE_PLAYBOOK_EXE: "./.venv/bin/ansible-playbook"

dotenv: [".env"]

tasks:
  build:
    desc: "Build Sysbox Image"
    cmds: 
      - docker build -t server -f Dockerfile.server .
      - task: clean-danglings

  generate-ssh-keys:
    desc: Generate New SSH Key Pair
    vars:
      SSH_TYPE: rsa
      ID_RSA_PATH: ./.ssh/id_rsa
      SSH_USER: admin
      SSH_HOST: controller
    cmds:
      - rm -rf ./.ssh/*
      - ssh-keygen -t {{.SSH_TYPE}} -b 4096 -f {{.ID_RSA_PATH}} -C "{{.SSH_USER}}@{{.SSH_HOST}}" -N ""

  clean-danglings:
    desc: "Clean Docker Dangling Images"
    cmd: docker image prune -f

  clean:
    desc: "Clean Server Image and Dangling Images"
    deps:
      - clean-danglings
    cmds:
      - docker rmi server 2>/dev/null || true

  deploy:
    desc: "Deploy Infrastructure Lab"
    deps:
      - destroy
    cmds:
      - docker compose up -d --force-recreate

  destroy:
    desc: "Destroy Infrastructure Lab"
    cmd: docker compose down -v

  ping:
    desc: "Test by Ansible Ping"
    cmd: $ANSIBLE_EXE -i inventory.yml all -m ping

  test-hello-world:
    desc: "Run Hello World Test Playbook"
    cmd: $ANSIBLE_PLAYBOOK_EXE -i inventory.yml ./playbooks/servers/test_hello_world.yml

  playbook-setup:
    desc: Setup Required Applications and Services
    vars:
      TS_AUTHKEY: $DEVOPS_REUSE_EPH_TAG_SYSCONT
      TAILNET_NAME: $TS_NET_NAME
    cmds:
      - $ANSIBLE_PLAYBOOK_EXE -i inventory.yml --extra-vars TS_AUTHKEY={{.TS_AUTHKEY}} ./playbooks/servers/setup_apps_and_services.yml
      - $ANSIBLE_PLAYBOOK_EXE -i inventory.yml --extra-vars TAILNET_NAME={{.TAILNET_NAME}} ./playbooks/servers/configure_nomad_servers.yml
      - $ANSIBLE_PLAYBOOK_EXE -i inventory.yml --extra-vars TAILNET_NAME={{.TAILNET_NAME}} ./playbooks/servers/configure_nomad_clients.yml

  nomad-start:
    desc: Start Nomad Agents (Servers and Clients)
    cmds:
      # TODO: Generalize and Parameterize Nomad Agent Initialization
      - docker exec -d -it server-1 /bin/bash -c 'nomad agent -config=/server.hcl'
      - docker exec -d -it server-2 /bin/bash -c 'nomad agent -config=/client.hcl'
  
  nomad-job-run:
    desc: Run Nomad HCL2 Jobspec
    summary: |
      Usage:
        $ task nomad-job-run -- <ARGS>
        $ task nomad-job-run -- path/to/jobspec.nomad.hcl
    vars:
      TAILNET_NAME: $TS_NET_NAME
    env:
      NOMAD_ADDR: http://server-1.{{.TAILNET_NAME}}.ts.net:4646
    cmds:
      - nomad job run {{.CLI_ARGS}}

  nomad-sample:
    desc: Nomad Sample from Hashicorp
    summary: |
      URL: https://developer.hashicorp.com/nomad/tutorials/get-started/gs-start-a-cluster
    vars:
      TAILNET_NAME: $TS_NET_NAME
    env:
      NOMAD_ADDR: http://server-1.{{.TAILNET_NAME}}.ts.net:4646
    cmds:
      - nomad job run ./nomad-jobs/pytechco-redis.nomad.hcl
      - nomad job run ./nomad-jobs/pytechco-web.nomad.hcl
      - nomad job run ./nomad-jobs/pytechco-setup.nomad.hcl
      - nomad job dispatch -meta budget="200" pytechco-setup
      - nomad job run ./nomad-jobs/pytechco-employee.nomad.hcl

  status:
    vars:
      SEPARATOR: ======================================
    desc: "Display Status of Infrastructure"
    cmds:
      - echo -e "\n{{.SEPARATOR}} Compose Status {{.SEPARATOR}}\n"
      - docker compose ls
      - echo -e "\n{{.SEPARATOR}} Process Status {{.SEPARATOR}}\n"
      - docker ps
      - echo -e "\n{{.SEPARATOR}} Network Status {{.SEPARATOR}}\n"
      - docker network ls
